-METHODS THAT COULD BE PLACED IN >1 CLASSES-

Method Name
    *Selected Class*
    Reasoning

{ALL "EXECUTE_ACTIVITY" METHODS}
executeTreeActivity(Entity entity, WorldModel world, ImageStore imageStore, EventScheduler scheduler)
executeFairyActivity(Entity entity, WorldModel world, ImageStore imageStore, EventScheduler scheduler)
executeDudeNotFullActivity(Entity entity, WorldModel world, ImageStore imageStore, EventScheduler scheduler)
executeDudeFullActivity(Entity entity, WorldModel world, ImageStore imageStore, EventScheduler scheduler)
executeSaplingActivity(Entity entity, WorldModel world, ImageStore imageStore, EventScheduler scheduler)
    *Entity*
    All of the execute "entitykind" activity methods could have been placed in multiple different classes: entity or world model
    being the main two. I chose to place these methods in the Entity class since the method is executing activity on different types of entities.
    Also, the methods for transforming the entity kind are located in the entity class as well. It makes sense to have all of these methods grouped together.

{ALL "TRANSFORM_" METHODS}
transformTree(Entity entity, WorldModel world, EventScheduler scheduler, ImageStore imageStore)
transformSapling(Entity entity, WorldModel world, EventScheduler scheduler, ImageStore imageStore)
transformPlant(Entity entity, WorldModel world, EventScheduler scheduler, ImageStore imageStore)
    *Entity*
    Again, these transform methods for each type of entity contain some other methods referenced in the Entity class. Although each method
    references imageStore, scheduler, and world, it references other methods from Entity the most, so I prioritized the placement in the same class.

scheduleActions(Entity entity, EventScheduler scheduler, WorldModel world, ImageStore imageStore)
    *EventScheduler*
    I originally wanted to place this method in entity, since it references the Entity instance variable: kind.
    However, I made a getter method to getKind() in Entity, and this seemed to solve the problem. The other methods referenced in the
    scheduleActions method are also located in EventScheduler so it makes the most sense for scheduleActions to be in the same class.

moveToFairy(Entity fairy, WorldModel world, Entity target, EventScheduler scheduler)
    *Entity*
    In the parameters for the method, the Entity name "fairy" is specific to the method. Even though methods from WorldModel are referenced,
    the primary focus is the entity kind fairy, so I thought it would be logical to include this in the Entity class.

{REMOVE AT, TRYADD, ADD, and MOVE ENTITY METHODS}
tryAddEntity(WorldModel world, Entity entity)
moveEntity(WorldModel world, EventScheduler scheduler, Entity entity, Point pos)
removeEntity(WorldModel world, EventScheduler scheduler, Entity entity)
removeEntityAt(WorldModel world, Point pos)
addEntity(Entity entity, WorldModel world)
    *Entity*
    For all of the methods that are concerning moving or adding entities, I contemplated placing in the WorldModel or Entity class.
    The methods equally reference other methods from other classes. Ultimately, I decided to place the respective methods in Entity due to come of the
    instance variables that were mentioned, such as position.





